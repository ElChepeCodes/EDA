package Tareas;



public class ord {

    //Metodo que ordena utilizando selection sort
    public static <T extends Comparable<T>> void ordenaSelectSort(T[] arr){
        int pos;
        T temp;
        for (int i = 0; i < arr.length; i++){
            pos = i;
            for (int j = i; j < arr.length; j++){
                if(arr[j].compareTo(arr[pos]) < 0){
                    pos = j;
                }//if                
            }//for
            temp = arr[i];
            arr[i] = arr[pos];
            arr[pos] = temp;
        }//for
    }//method

    //Metodo que ordena utilizando insertion sort
    public static<T extends Comparable<T>> void ordenaInsertSort(T[] arr){
        int i = 1, j;
        T temp;
        while (i < arr.length){
            if (arr[i].compareTo(arr[i - 1]) < 0){
                j = i;
                while(j > 0 && arr[j].compareTo(arr[j - 1]) < 0){
                    temp = arr[j];
                    arr[j] = arr[j - 1];
                    arr[j - 1] = temp;
                }//while
            }//if
        }//while
    }//method

    //Metodo que inicia quick sort utilizando el inicio del arreglo y el final del arreglo como parametros
    public static<T extends Comparable <T>> void ordenaQuickSort(T [] arr){
        ordenaQuickSort(arr, 0, arr.length - 1);
    }//method

    //Metodo recursivo que ordena utilizando el quick sort
    private static <T extends Comparable <T>> void ordenaQuickSort(T [] arr, int in, int fin){    	
    	if (in >= fin) {
    		return;
        }
        int i = in, piv = (int) (Math.random() * ((fin - in) + 1)) + in, aux;
        T temp;
        while (i <= fin){
            if (i < piv && arr[i].compareTo(arr[piv]) > 0){
                
                    temp = arr[i];
                    arr[i] = arr[piv];
                    arr[piv] = temp;
                
            }//if
            else
                if (i > piv && arr[i].compareTo(arr[piv]) < 0){
                    temp = arr[i];
                    arr[i] = arr[piv];
                    arr[piv] = temp;
                    aux = i;
                    i = piv;
                    piv = aux;
                }//if
            i++;
        }//while
        ordenaQuickSort(arr, 0, piv-1);                
    }//method

    //Metodo que ordena el arreglo con el merge sort
    public static <T extends Comparable <T>> void mergeSort(T [] datos, int min, int max){
        T [] temp;
        int indice, izq, der;
        if (min >= max - 1)
            return;
        int tam = max - min + 1, mitad = (max + min)/2;
        temp = (T[])(new Comparable [tam]);
        mergeSort(datos, min, mitad);
        mergeSort(datos, mitad + 1, max);

        izq = min; der = mitad + 1;
        for(int i = 0; i < tam; i++){
            if(izq <= mitad && der <= max){
                if(datos[izq].compareTo(datos[der]) < 0)
                    temp[i] = datos[izq++];
                else
                    temp[i] = datos[der++];
            }//if
            else{
                if(izq <= mitad)
                    temp[i] = datos[izq++];
                else   
                    temp[i] = datos[der++];
            }//else
        }//for


        for(int i = 0; i < temp.length; i++){
            datos[min + i] = temp[i];
        }//for
    }//method

    public static <T extends Comparable<T>> void mergeSortMixcoac(T[] arr){
        int tam = arr.length, s = 2, i = 0;
        while (s <= tam){
            while(i < tam){

            }//while
        }//while


    }//method

    








    //Metodo que regresa el arreglo como un String
    public static <T> String impArr(T [] arr){
        StringBuilder res = new StringBuilder();

        for(int i = 0; i < arr.length; i++)
            res.append(arr[i]).append(", ");

        return res.toString();
    }//method

    public static void main (String args []){        
        Integer[] arr = {3,2,6,1,4,2,6,3,4,3,3,6,2,6,3,4,2,3,6,7,3,4,5,-3};
        System.out.println("Original");
        System.out.println(impArr(arr));
        ordenaSelectSort(arr);
        System.out.println("Ordenado");
        System.out.println(impArr(arr));
    }//main


}
